{"ast":null,"code":"import axios from 'axios';\nimport { BASE_URL } from './BaseURL'; // import để lấy URL cơ sở của API\n\n// Create axios instance\nconst apiClient = axios.create({\n  //  api default  will have BaseURL , header\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add token to headers\napiClient.interceptors.request.use(config => {\n  //config la tất cả thông tin của  request\n  const token = localStorage.getItem('access_token'); // lấy token từ localStorage\n  // nếu có token thì gắn vào header\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor\napiClient.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config; // Lưu request ban đầu để gọi lại nếu cần thiết , \n\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // tránh lặp vô hạn\n\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (refreshToken) {\n        const res = await axios.post(`${BASE_URL}/Account/refresh`, {\n          // Nếu backend có endpoint này\n          token: refreshToken\n        });\n\n        // HOẶC tạm thời comment phần refresh nếu backend chưa có:\n        // localStorage.removeItem('access_token');\n        // localStorage.removeItem('refresh_token');\n        // window.location.href = '/login';  // Redirect về login\n\n        // Lưu token mới\n        localStorage.setItem('access_token', res.data.access_token);\n        localStorage.setItem('refresh_token', res.data.refresh_token);\n\n        // Gắn lại token mới\n        apiClient.defaults.headers.Authorization = `Bearer ${res.data.access_token}`;\n        originalRequest.headers.Authorization = `Bearer ${res.data.access_token}`; // Gắn token mới vào request ban đầu config = originalRequest\n\n        // Gọi lại request ban đầu\n        return apiClient(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh token cũng hết hạn => logout\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n    }\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","res","post","setItem","data","access_token","refresh_token","defaults","refreshError","removeItem"],"sources":["C:/Users/Minh/Desktop/FullStackWebVuavia/frontend/src/Services/ApiService.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport { BASE_URL } from './BaseURL';  // import để lấy URL cơ sở của API\r\n\r\n// Create axios instance\r\nconst apiClient = axios.create({   //  api default  will have BaseURL , header\r\n  baseURL: BASE_URL,\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\n// Request interceptor to add token to headers\r\napiClient.interceptors.request.use((config) => { //config la tất cả thông tin của  request\r\n  const token = localStorage.getItem('access_token'); // lấy token từ localStorage\r\n  // nếu có token thì gắn vào header\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n},\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor\r\napiClient.interceptors.response.use((response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config; // Lưu request ban đầu để gọi lại nếu cần thiết , \r\n\r\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true; // tránh lặp vô hạn\r\n\r\n      try {\r\n        const refreshToken = localStorage.getItem('refresh_token');\r\n        if (refreshToken) {\r\n          const res = await axios.post(`${BASE_URL}/Account/refresh`, {  // Nếu backend có endpoint này\r\n            token: refreshToken,\r\n          });\r\n\r\n          // HOẶC tạm thời comment phần refresh nếu backend chưa có:\r\n          // localStorage.removeItem('access_token');\r\n          // localStorage.removeItem('refresh_token');\r\n          // window.location.href = '/login';  // Redirect về login\r\n\r\n          // Lưu token mới\r\n          localStorage.setItem('access_token', res.data.access_token);\r\n          localStorage.setItem('refresh_token', res.data.refresh_token);\r\n\r\n          // Gắn lại token mới\r\n          apiClient.defaults.headers.Authorization = `Bearer ${res.data.access_token}`;\r\n\r\n          originalRequest.headers.Authorization = `Bearer ${res.data.access_token}`; // Gắn token mới vào request ban đầu config = originalRequest\r\n\r\n          // Gọi lại request ban đầu\r\n          return apiClient(originalRequest);\r\n        }\r\n      }\r\n      catch (refreshError) {\r\n        // Refresh token cũng hết hạn => logout\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,WAAW,CAAC,CAAE;;AAEvC;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAAI;EACjCC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAChD,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAAE;EAC/C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;EACpD;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACEK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,SAAS,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAAES,QAAQ,IAAKA,QAAQ,EACxD,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM,CAAC,CAAC;;EAEtC,IAAIK,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC9EF,eAAe,CAACE,MAAM,GAAG,IAAI,CAAC,CAAC;;IAE/B,IAAI;MACF,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MAC1D,IAAIS,YAAY,EAAE;QAChB,MAAMC,GAAG,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAC,GAAGtB,QAAQ,kBAAkB,EAAE;UAAG;UAC7DS,KAAK,EAAEW;QACT,CAAC,CAAC;;QAEF;QACA;QACA;QACA;;QAEA;QACAV,YAAY,CAACa,OAAO,CAAC,cAAc,EAAEF,GAAG,CAACG,IAAI,CAACC,YAAY,CAAC;QAC3Df,YAAY,CAACa,OAAO,CAAC,eAAe,EAAEF,GAAG,CAACG,IAAI,CAACE,aAAa,CAAC;;QAE7D;QACAzB,SAAS,CAAC0B,QAAQ,CAACvB,OAAO,CAACQ,aAAa,GAAG,UAAUS,GAAG,CAACG,IAAI,CAACC,YAAY,EAAE;QAE5ER,eAAe,CAACb,OAAO,CAACQ,aAAa,GAAG,UAAUS,GAAG,CAACG,IAAI,CAACC,YAAY,EAAE,CAAC,CAAC;;QAE3E;QACA,OAAOxB,SAAS,CAACgB,eAAe,CAAC;MACnC;IACF,CAAC,CACD,OAAOW,YAAY,EAAE;MACnB;MACAlB,YAAY,CAACmB,UAAU,CAAC,cAAc,CAAC;MACvCnB,YAAY,CAACmB,UAAU,CAAC,eAAe,CAAC;IAC1C;EACF;EAEA,OAAOf,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AACD,eAAeZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}