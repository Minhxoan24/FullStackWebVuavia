{"ast":null,"code":"import axios from 'axios';\nimport { BASE_URL } from './BaseURL'; // import để lấy URL cơ sở của API\n\n// Debug logging trong development\nif (process.env.NODE_ENV === 'development') {\n  console.log('ApiService initialized with BASE_URL:', BASE_URL);\n}\n\n// Create axios instance\nconst apiClient = axios.create({\n  //  api default  will have BaseURL , header\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 seconds timeout\n});\n\n// Request interceptor to add token to headers\napiClient.interceptors.request.use(config => {\n  //config la tất cả thông tin của  request\n  const token = localStorage.getItem('access_token'); // lấy token từ localStorage\n  // nếu có token thì gắn vào header\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Debug logging trong development\n  if (process.env.NODE_ENV === 'development') {\n    var _config$method;\n    console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.baseURL}${config.url}`);\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  // Debug logging trong development\n  if (process.env.NODE_ENV === 'development') {\n    var _response$config$meth;\n    console.log(`API Response: ${response.status} ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url}`);\n  }\n  return response;\n}, async error => {\n  // Log lỗi để debug\n  if (process.env.NODE_ENV === 'development') {\n    var _error$config, _error$config2, _error$response, _error$config3;\n    console.error('API Error:', {\n      url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n      method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n      status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n      message: error.message,\n      baseURL: (_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.baseURL\n    });\n  }\n  const originalRequest = error.config; // Lưu request ban đầu để gọi lại nếu cần thiết , \n\n  // Xử lý lỗi network/connection\n  if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {\n    console.error('Không thể kết nối đến server:', BASE_URL);\n    return Promise.reject(new Error('Không thể kết nối đến server. Vui lòng kiểm tra kết nối mạng.'));\n  }\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // tránh lặp vô hạn\n\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (refreshToken) {\n        const res = await axios.post(`${BASE_URL}/Account/refresh`, {\n          // Nếu backend có endpoint này\n          token: refreshToken\n        });\n\n        // Lưu token mới\n        localStorage.setItem('access_token', res.data.access_token);\n        localStorage.setItem('refresh_token', res.data.refresh_token);\n\n        // Gắn lại token mới\n        apiClient.defaults.headers.Authorization = `Bearer ${res.data.access_token}`;\n        originalRequest.headers.Authorization = `Bearer ${res.data.access_token}`; // Gắn token mới vào request ban đầu config = originalRequest\n\n        // Gọi lại request ban đầu\n        return apiClient(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh token cũng hết hạn => logout\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n    }\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","BASE_URL","process","env","NODE_ENV","console","log","apiClient","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","_config$method","method","toUpperCase","url","error","Promise","reject","response","_response$config$meth","status","_error$config","_error$config2","_error$response","_error$config3","message","originalRequest","code","Error","_retry","refreshToken","res","post","setItem","data","access_token","refresh_token","defaults","refreshError","removeItem"],"sources":["C:/Users/Minh/Desktop/DaVuavia/FullStackWebVuavia/frontend/src/Services/ApiService.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport { BASE_URL } from './BaseURL';  // import để lấy URL cơ sở của API\r\n\r\n// Debug logging trong development\r\nif (process.env.NODE_ENV === 'development') {\r\n  console.log('ApiService initialized with BASE_URL:', BASE_URL);\r\n}\r\n\r\n// Create axios instance\r\nconst apiClient = axios.create({   //  api default  will have BaseURL , header\r\n  baseURL: BASE_URL,\r\n  headers: { 'Content-Type': 'application/json' },\r\n  timeout: 10000, // 10 seconds timeout\r\n});\r\n\r\n// Request interceptor to add token to headers\r\napiClient.interceptors.request.use((config) => { //config la tất cả thông tin của  request\r\n  const token = localStorage.getItem('access_token'); // lấy token từ localStorage\r\n  // nếu có token thì gắn vào header\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  \r\n  // Debug logging trong development\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.baseURL}${config.url}`);\r\n  }\r\n  \r\n  return config;\r\n},\r\n  (error) => {\r\n    console.error('Request interceptor error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    // Debug logging trong development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`API Response: ${response.status} ${response.config.method?.toUpperCase()} ${response.config.url}`);\r\n    }\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    // Log lỗi để debug\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.error('API Error:', {\r\n        url: error.config?.url,\r\n        method: error.config?.method,\r\n        status: error.response?.status,\r\n        message: error.message,\r\n        baseURL: error.config?.baseURL\r\n      });\r\n    }\r\n\r\n    const originalRequest = error.config; // Lưu request ban đầu để gọi lại nếu cần thiết , \r\n\r\n    // Xử lý lỗi network/connection\r\n    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {\r\n      console.error('Không thể kết nối đến server:', BASE_URL);\r\n      return Promise.reject(new Error('Không thể kết nối đến server. Vui lòng kiểm tra kết nối mạng.'));\r\n    }\r\n\r\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true; // tránh lặp vô hạn\r\n\r\n      try {\r\n        const refreshToken = localStorage.getItem('refresh_token');\r\n        if (refreshToken) {\r\n          const res = await axios.post(`${BASE_URL}/Account/refresh`, {  // Nếu backend có endpoint này\r\n            token: refreshToken,\r\n          });\r\n\r\n\r\n          // Lưu token mới\r\n          localStorage.setItem('access_token', res.data.access_token);\r\n          localStorage.setItem('refresh_token', res.data.refresh_token);\r\n\r\n          // Gắn lại token mới\r\n          apiClient.defaults.headers.Authorization = `Bearer ${res.data.access_token}`;\r\n\r\n          originalRequest.headers.Authorization = `Bearer ${res.data.access_token}`; // Gắn token mới vào request ban đầu config = originalRequest\r\n\r\n          // Gọi lại request ban đầu\r\n          return apiClient(originalRequest);\r\n        }\r\n      }\r\n      catch (refreshError) {\r\n        // Refresh token cũng hết hạn => logout\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,WAAW,CAAC,CAAE;;AAEvC;AACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;EAC1CC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEL,QAAQ,CAAC;AAChE;;AAEA;AACA,MAAMM,SAAS,GAAGP,KAAK,CAACQ,MAAM,CAAC;EAAI;EACjCC,OAAO,EAAER,QAAQ;EACjBS,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB,CAAC;EAC/CC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAAE;EAC/C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;EACpD;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;;EAEA;EACA,IAAId,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAAA,IAAAgB,cAAA;IAC1Cf,OAAO,CAACC,GAAG,CAAC,iBAAAc,cAAA,GAAgBL,MAAM,CAACM,MAAM,cAAAD,cAAA,uBAAbA,cAAA,CAAeE,WAAW,CAAC,CAAC,IAAIP,MAAM,CAACN,OAAO,GAAGM,MAAM,CAACQ,GAAG,EAAE,CAAC;EAC5F;EAEA,OAAOR,MAAM;AACf,CAAC,EACES,KAAK,IAAK;EACTnB,OAAO,CAACmB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EAClD,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAjB,SAAS,CAACK,YAAY,CAACe,QAAQ,CAACb,GAAG,CAChCa,QAAQ,IAAK;EACZ;EACA,IAAIzB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAAA,IAAAwB,qBAAA;IAC1CvB,OAAO,CAACC,GAAG,CAAC,iBAAiBqB,QAAQ,CAACE,MAAM,KAAAD,qBAAA,GAAID,QAAQ,CAACZ,MAAM,CAACM,MAAM,cAAAO,qBAAA,uBAAtBA,qBAAA,CAAwBN,WAAW,CAAC,CAAC,IAAIK,QAAQ,CAACZ,MAAM,CAACQ,GAAG,EAAE,CAAC;EACjH;EACA,OAAOI,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EACf;EACA,IAAItB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAAA,IAAA0B,aAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,cAAA;IAC1C5B,OAAO,CAACmB,KAAK,CAAC,YAAY,EAAE;MAC1BD,GAAG,GAAAO,aAAA,GAAEN,KAAK,CAACT,MAAM,cAAAe,aAAA,uBAAZA,aAAA,CAAcP,GAAG;MACtBF,MAAM,GAAAU,cAAA,GAAEP,KAAK,CAACT,MAAM,cAAAgB,cAAA,uBAAZA,cAAA,CAAcV,MAAM;MAC5BQ,MAAM,GAAAG,eAAA,GAAER,KAAK,CAACG,QAAQ,cAAAK,eAAA,uBAAdA,eAAA,CAAgBH,MAAM;MAC9BK,OAAO,EAAEV,KAAK,CAACU,OAAO;MACtBzB,OAAO,GAAAwB,cAAA,GAAET,KAAK,CAACT,MAAM,cAAAkB,cAAA,uBAAZA,cAAA,CAAcxB;IACzB,CAAC,CAAC;EACJ;EAEA,MAAM0B,eAAe,GAAGX,KAAK,CAACT,MAAM,CAAC,CAAC;;EAEtC;EACA,IAAIS,KAAK,CAACY,IAAI,KAAK,cAAc,IAAIZ,KAAK,CAACY,IAAI,KAAK,aAAa,EAAE;IACjE/B,OAAO,CAACmB,KAAK,CAAC,+BAA+B,EAAEvB,QAAQ,CAAC;IACxD,OAAOwB,OAAO,CAACC,MAAM,CAAC,IAAIW,KAAK,CAAC,+DAA+D,CAAC,CAAC;EACnG;EAEA,IAAIb,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACM,eAAe,CAACG,MAAM,EAAE;IAC9EH,eAAe,CAACG,MAAM,GAAG,IAAI,CAAC,CAAC;;IAE/B,IAAI;MACF,MAAMC,YAAY,GAAGtB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MAC1D,IAAIqB,YAAY,EAAE;QAChB,MAAMC,GAAG,GAAG,MAAMxC,KAAK,CAACyC,IAAI,CAAC,GAAGxC,QAAQ,kBAAkB,EAAE;UAAG;UAC7De,KAAK,EAAEuB;QACT,CAAC,CAAC;;QAGF;QACAtB,YAAY,CAACyB,OAAO,CAAC,cAAc,EAAEF,GAAG,CAACG,IAAI,CAACC,YAAY,CAAC;QAC3D3B,YAAY,CAACyB,OAAO,CAAC,eAAe,EAAEF,GAAG,CAACG,IAAI,CAACE,aAAa,CAAC;;QAE7D;QACAtC,SAAS,CAACuC,QAAQ,CAACpC,OAAO,CAACS,aAAa,GAAG,UAAUqB,GAAG,CAACG,IAAI,CAACC,YAAY,EAAE;QAE5ET,eAAe,CAACzB,OAAO,CAACS,aAAa,GAAG,UAAUqB,GAAG,CAACG,IAAI,CAACC,YAAY,EAAE,CAAC,CAAC;;QAE3E;QACA,OAAOrC,SAAS,CAAC4B,eAAe,CAAC;MACnC;IACF,CAAC,CACD,OAAOY,YAAY,EAAE;MACnB;MACA9B,YAAY,CAAC+B,UAAU,CAAC,cAAc,CAAC;MACvC/B,YAAY,CAAC+B,UAAU,CAAC,eAAe,CAAC;IAC1C;EACF;EAEA,OAAOvB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AACD,eAAejB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}